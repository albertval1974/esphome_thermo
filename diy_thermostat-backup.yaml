esphome:
  name: diy_thermostat
  platform: ESP8266
  board: d1_mini_lite
  on_boot:
    priority: -10.0
    # ...
    then:
      - switch.turn_off: heater
      - switch.turn_off: cooler
      - switch.turn_off: fan
      - lambda: |-
          id(tmode).publish_state("OFF");
          id(edit_mode).publish_state(false);
          




wifi:
  ssid: "DJ6ZK"
  password: "51B4A1AEC7"
  
  manual_ip:
    static_ip: 192.168.1.103
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Diy Thermostat Fallback Hotspot"
    password: "password"

#captive_portal:

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:

ota:

font:
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_small
    size: 10
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_medium
    size: 18
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_large
    size: 30
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_giant
    size: 70

i2c:
  sda: D2
  scl: D1
  frequency: 400khz

globals:
  - id: target_temp
    type: float
    restore_value: no
    initial_value: '22.0'

  - id: prev_rot
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: dial_fwd
    type: bool 
    initial_value: 'true'


text_sensor:
  - platform: template 
    id: "tmode"
    name: "Mode"
    
  - platform: template
    id: displayMode

  - platform: template
    id: desired_temp

switch:
 
  - platform: gpio
    id: heater
    pin: D0
    interlock: [cooler]

  - platform: gpio
    id: cooler
    pin: D7
    interlock: [heater]
      
  - platform: gpio
    id: fan
    pin: D8
   
  - platform: template
    name: "Edit Mode"
    id: edit_mode
  
  - platform: template
    name: "COOL"
    id: cool_mode
    #interlock: &interlock_group [cool_mode, heat_mode, fan_mode,twek_mode, off_mode]
  
  - platform: template
    name: "HEAT"
    id: heat_mode
    #interlock: *interlock_group

  - platform: template
    name: "FAN"
    id: fan_mode
    #interlock: *interlock_group

  - platform: template
    name: "OFF"
    id: off_mode
    #interlock: *interlock_group

  - platform: template
    name: "TWEK"
    id: twek_mode
    #interlock: *interlock_group

    


sensor:
  - platform: template
    name: "Target Temperature"
    id : ttarget

  - platform: template
    name: "Current Temp"
    id: cur_temp
      
  - platform: dht
    model: DHT11
    pin:
      number: D3
      mode: INPUT_PULLUP
    temperature:
      name: "Temperature"
      id: my_temp
      #filters:
        #convert temp to F
      #  - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "Â°C"
      on_value_range:
        above: 1
        then:
          - lambda: id(cur_temp).publish_state(x);
          - component.update: oled_display
    humidity:
      name: "Humidity"
      id: my_humid
    update_interval: 10s

  - platform: rotary_encoder
    name: "Temperature Dial"
    id:  "temp_dial"
    pin_a: 
      number: D5
      mode: INPUT_PULLUP
    pin_b:
      number: D6
      mode: INPUT_PULLUP
    resolution: 4
    #filters:
    #  - debounce: 10ms

    on_value:
      then:
        - lambda: |-
           
              static float new_value = id(thermostat_controller).target_temperature_low;
              if (x < id(prev_rot)) {
                id(dial_fwd) = true;
                if(id(edit_mode).state) {
                  //if in edit mode select prev option
                  id(chose_option).execute();
                } else {
                  new_value = std::max(id(thermostat_controller).target_temperature_low - 1.0, 10.0);
            
                  //new_value = std::max(id(target_temp) - 1.0, 10.0);
                }

              } else if (x > id(prev_rot)) {
                id(dial_fwd) = false;
                if(id(edit_mode).state) {
                  //if in edit mode select prev option
                  id(chose_option).execute();
                } else {
                  new_value = std::min(id(thermostat_controller).target_temperature_low + 1.0, 35.0);

                  //new_value = std::min(id(target_temp) + 1.0, 35.0);
                }
              }
              if (id(edit_mode).state == false) {
                //id(ttarget).publish_state(new_value);
                
                auto call = id(thermostat_controller).make_call();
                call.set_target_temperature_low(new_value);
                call.set_target_temperature_high(new_value + 0.5);
                call.perform();


              }
            
              id(prev_rot)=x;
              
              ESP_LOGD("stuff", "x: %f prev_rot: %f tt: %f" , x, id(prev_rot), new_value);
        - component.update: oled_display
            
            
# Rotary encoder button..
binary_sensor:
  - platform: gpio
    pin: 
      number: D4
      mode: INPUT_PULLUP
      inverted: true
    name: "Option"
    id: option_select
    #filters:
    #  - delayed_on: 10ms
   
    on_multi_click:
    # ##### turn on select option mode (edit_mode)
     - timing:
         - ON for at least 4.0s
       then:
         if:
          condition:
            switch.is_on: edit_mode
          then:
            - display.page.show: main_page
            - lambda: |-
                id(cooler).turn_off();
                id(heater).turn_off();
                id(fan).turn_off();
                id(edit_mode).publish_state(false);
                auto call = id(thermostat_controller).make_call();
                call.set_target_temperature_low(id(my_temp).state);
                call.set_target_temperature_high(id(my_temp).state);
                call.perform();
          else:
            - display.page.show: select_mode_page
            - lambda: |-
                id(edit_mode).publish_state(true);

script:
  - id: chose_option
    then:
    #- script.execute: do_idle
    - lambda: |-

        // careate a list of option
        // if dial_fwd select next item in list
                
        static int i = 0;
        if(id(dial_fwd)){
          if(i == 4){
            i = 0;
          } else { i ++;}
        } else {
          if(i == 0){
            i = 4;
          } else { i --;}
        }

        // do items base on i
        if(i == 0){
          id(tmode).publish_state("OFF");
          id(off_mode).turn_on();
        } else if (i == 1) {
          id(tmode).publish_state("HEAT");
          id(heat_mode).turn_on();
        } else if (i == 2) {
          id(tmode).publish_state("COOL");
          id(cool_mode).turn_on();
        } else if (i == 3) {
          id(tmode).publish_state("FAN");
          id(fan_mode).turn_on();
        } else if (i == 4) {
          id(twek_mode).turn_on();
          id(tmode).publish_state("TWEK");

        }

 
  # - id: fan_cooldown
  #   then:
  #     - delay: 2s
  #     - switch.turn_off: fan

  # - id: do_heat
  #   then:
  #   - lambda: |-
  #       if(id(tmode).state.compare("HEAT")==0){
  #         //id(heater).turn_on();
  #         //id(fan).turn_on();
  #         id(heat_ctl).turn_on();
  #       }

  # - id: do_cool
  #   then:
  #   - lambda: |-
  #       if(id(tmode).state.compare("COOL")==0){
  #         //id(cooler).turn_on();
  #         id(cool_ctl).turn_on();
  #         //id(fan).turn_on();
  #       }

  # - id: do_idle
  #   then:
  #    - lambda: |-
  #       id(cool_ctl).turn_off();
  #       id(heat_ctl).turn_off();
        
  #       //id(cooler).turn_off();
  #       //id(heater).turn_off();
  #       //if(id(tmode).state.compare("FAN")==0){ 
  #       //  id(fan).turn_on();
  #       //} else {
  #       //  id(fan).turn_off();
  #       //  //id(fan_cooldown).execute();
  #       //}


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #reset_pin: D0
    address: 0x3C
    id: oled_display
    #display modes 
    # 1 = show Large current temp and medium target
    # 2 = show Larget Target Temp and medium current temp
    #   ______________
    #  |       AAAAAA 
    #  |yyy    AAAAAA 
    #  |       AAAAAA 
    #  |xxxx   AAAAAA
    
    pages:
      - id: main_page
        lambda: |-
          //info text
          
          
          // A areaa
          //it.printf(35, 30, id(font_giant), "%.0f", id(thermostat_controller).target_temperature_low * (9.0/5.0) + 32.0);
          it.printf(35, 30, id(font_giant), "%.0f", id(thermostat_controller).target_temperature_low);
          //it.printf(35, 30, id(font_giant), "%.0f", id(my_temp).state);
          //it.printf(35, 30, id(font_giant), "%.0f", id(target_temp));
          
         
          // YYY area
          //it.printf(0, 20, id(font_medium), "%.0f", id(my_temp).state * (9.0/5.0) + 32.0);
          it.printf(0, 20, id(font_medium), "%.0f", id(my_temp).state);
          //it.printf(0, 20, id(font_medium), "%.0f", id(thermostat_controller).target_temperature_low);

          // XXX area
          it.printf(0, 50, id(font_small), "%s",id(tmode).state.c_str());

      - id: main_page_X
        lambda: |-
          //info text
          
          
          // A areaa
          it.printf(35, 30, id(font_giant), "%.0f", id(thermostat_controller).target_temperature_low);
          //it.printf(35, 30, id(font_giant), "%.0f", id(my_temp).state);
          //it.printf(35, 30, id(font_giant), "%.0f", id(target_temp));
          
          
          // YYY area
          it.printf(0, 20, id(font_medium), "%.0f", id(my_temp).state);
          //it.printf(0, 20, id(font_medium), "%.0f", id(thermostat_controller).target_temperature_low);

          // XXX area
          it.printf(0, 50, id(font_small), "%s",id(tmode).state.c_str());      

      - id: select_mode_page
        lambda: |-
          it.print(0,5, id(font_small), "Rotate To Select");
          it.printf(20, 32, id(font_large), "%s",id(tmode).state.c_str());
          it.print(0,42, id(font_medium), "Push To Set");


climate:
  - platform: bang_bang
    id: thermostat_controller
    name: "Thermostat"
    sensor: my_temp
    visual:
      #min_temperature: 40 Â°F
      #max_temperature: 90 Â°F
      temperature_step: 1

    default_target_temperature_low: 22 Â°C
    default_target_temperature_high: 23 Â°C

    heat_action:
      #- switch.turn_on: heat_ctl
      # the bang bang as currently implemented does not function as US style thermostats. 
      # we must therefore manage our own modes.   
      - lambda: |-
          if(id(tmode).state.compare("HEAT")==0){
            id(heater).turn_on();
            id(cooler).turn_off();

            if(id(fan).state){
              // fan already on
            } else {
              id(fan).turn_on();
            }
          }

          if(id(tmode).state.compare("FAN")==0){ 
            if(id(fan).state){
              // fan already on
            } else {
              id(fan).turn_on();
            }
          }
         
      #- script.execute: do_heat
      #- script.execute: do_dispatch

      #- lambda: |-
      #    if(id(tmode).state.compare("HEAT")==0){
      #      id(heat_ctl).turn_on();
      #    }

    cool_action:
      - lambda: |-
          if(id(tmode).state.compare("COOL")==0){
            id(cooler).turn_on();
            id(heater).turn_off();

            if(id(fan).state){
              // fan already on
            } else {
              id(fan).turn_on();
            }
          }
          if(id(tmode).state.compare("FAN")==0){ 
            if(id(fan).state){
              // fan already on
            } else {
              id(fan).turn_on();
            }
          }
           
      #-  switch.turn_on: cool_ctl
      #- script.execute: do_cool
      #- script.execute: do_dispatch
      #- lambda: |-
      #    if(id(tmode).state.compare("COOL")==0){
      #      id(cool_ctl).turn_on();
      #    }

    idle_action:
      - lambda: |-
          if(id(tmode).state.compare("HEAT")==0){
            id(heater).turn_off();
          } else if (id(tmode).state.compare("COOL")==0){
            id(cooler).turn_off();
          }
          //if not in FAN mode then turn off fan
          if(id(tmode).state.compare("FAN")!=0){
            id(fan).turn_off();
          }
      
      
      #- switch.turn_off: heat_ctl
      #- switch.turn_off: cool_ctl

      #- script.execute: do_idle
      #- script.execute: do_dispatch





