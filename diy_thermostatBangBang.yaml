esphome:
  name: bang_bang_thermostat
  platform: ESP8266
  board: d1_mini_lite
  on_boot:
    priority: -10.0
    #...
    then:
      - switch.turn_off: heater
      - switch.turn_off: cooler
      - switch.turn_off: fan
      - climate.control:
          id: thermostat_controller
          mode: HEAT
      - lambda: |-
          id(run_mode).publish_state("hvac");
          //id(edit_mode).publish_state(false);
          id(target_temp_high) = (id(target_temp)) + (id(Width) );
          id(target_temp_low) = (id(target_temp)) - (id(Width) );
          id(idle_page).show();
          
          

# assignments





wifi:
  ssid: !secret wifi_ssid 
  password: !secret wifi_password
  
  manual_ip:
    static_ip: 192.168.1.103
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret wifi_ap_ssid
    password: !secret wifi_ap_password

#captive_portal:

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:

font:
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_small
    size: 12
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_medium
    size: 18
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_large
    size: 40
  - file: "fonts/Montserrat-Bold.ttf"
    id: font_giant
    size: 70

i2c:
  sda: D2
  scl: D1
  frequency: 400khz

substitutions:
  fan_cooldown_timeout: 5s
  dial_cooldown_timeout: 1s

globals:
  - id: target_temp
    type: float
    restore_value: yes
    initial_value: '72.0'

  - id: target_temp_low
    type: float
    initial_value: '0.0'

  - id: target_temp_high
    type: float
    initial_value: '0.0'
    
  - id: prev_rot
    type: float
    restore_value: no
    initial_value: '0.0'

  # - id: dial_fwd
  #   type: bool 
  #   initial_value: 'true'
  
  # - id: dial_stopped
  #   type: int
  #   initial_value: '1'

  - id: Width
    type: float
    restore_value: 'true'
    initial_value: '3.0'

  - id: Low_Offset
    type: float
    restore_value: 'true'
    initial_value: '4.0'

  - id: High_Offset
    type: float
    restore_value: 'true'
    initial_value: '4.0'

  - id: Min_Run
    type: float
    restore_value: 'true'
    initial_value: '10.0'
  
  - id: Max_Run
    type: float
    restore_value: 'true'
    initial_value: '4.0'

  - id: Fan_Over
    type: float
    restore_value: 'true'
    initial_value: '5.0'


  - id: setting_value
    type: float
    initial_value: '0.0'
  
  - id: setting_val_max
    type: float

  - id: setting_val_min
    type: float
   
 

text_sensor:
  - platform: template 
    id: "tmode"
    name: "tMode"
    
  - platform: template
    id: selected_option
    name: "Display Mode"
     
  - platform: template
    id: display_page
  
  - platform: template
    id: setting_var_name
  
  - platform: template
    id: run_mode
    
  - platform: template
    id: dial_dir


switch:
  - platform: gpio
    id: heater
    name: "heater"
    pin: D0
    interlock: [cooler]
    on_turn_on:
      - switch.turn_on: fan
      - lambda: id(tmode).publish_state("HEAT");
    on_turn_off:
      script.execute: fan_shutdown
        
  - platform: gpio
    id: cooler
    name: "cooler"
    pin: D7
    interlock: [heater]
    on_turn_on:
      - switch.turn_on: fan
      - lambda: id(tmode).publish_state("COOL");
    on_turn_off:
      script.execute: fan_shutdown
      
      
  - platform: gpio
    id: fan
    name: "fan"
    pin: D8

   
  - platform: template
    name: "Edit Mode"
    id: edit_mode


 

sensor:
  - platform: template
    id: display_updater
    update_interval: 10s
    lambda: |-
      //id(target_temp) = id(thermostat_controller).target_temperature_low * (9.0/5.0) + 32.0;
      return id(target_temp);

  - platform: template
    id: my_tempX
    unit_of_measurement: "°C"
    lambda: return 21.0;

  - platform: bmp085
    temperature:
      name: "Temperature"
      id: my_temp
      unit_of_measurement: "°C"
    pressure:
      name: "Pressure"
      id: my_humid
    update_interval: 5s

  # - platform: dht
  #   model: DHT11
  #   pin:
  #     number: D3
  #     mode: INPUT_PULLUP
  #   temperature:
  #     name: "Temperature"
  #     id: my_tempX
  #     unit_of_measurement: "°C"

  #   humidity:
  #     name: "Humidity"
  #     id: my_humid
  #   update_interval: 10s

  - platform: rotary_encoder
    name: "Temperature Dial"
    id:  "temp_dial"
    pin_a: 
      number: D5
      mode: INPUT_PULLUP
    pin_b:
      number: D6
      mode: INPUT_PULLUP
    resolution: 4

    on_value:
      then:
        - lambda: |-
            //for all options.. 
            static float new_value = 0.0;
            id(ui_timeout).stop();
            
            if (x < id(prev_rot)) {
              id(dial_dir).publish_state("bkw");
            } else if (x > id(prev_rot)) {
              id(dial_dir).publish_state("fwd");
            }
            // ****************************
            //               hvac 
            //******************************
            if(id(run_mode).state == "hvac") {
              id(set_thermostat).show();
              id(set_bang_bang_temps).stop();
              //static float new_value = 0.0;
              if (id(dial_dir).state == "bkw") {
                new_value = std::max(id(target_temp) - 1.0, 32.0);
              } else if (id(dial_dir).state == "fwd") {
                new_value = std::min(id(target_temp) + 1.0, 90.0);
              }
              id(target_temp) = new_value;    
              id(target_temp_high) = (id(target_temp)) + (id(High_Offset) );
              id(target_temp_low) = (id(target_temp)) - (id(Low_Offset) );
              id(set_bang_bang_temps).execute();
            
            // ************************************
            //          select_setting
            // ************************************
            } else if(id(run_mode).state == "select_setting") {
              static int i = 0;
              if(id(dial_dir).state == "fwd"){
                if(i == 4){
                    i = 0;
                } else { i ++;}
              } else {
                if(i == 0){
                    i = 4;
                } else { i --;}
              }
              // do items base on i
              if(i == 0){
                id(selected_option).publish_state("High_Offset");
              } else if (i == 1) {
                id(selected_option).publish_state("Low_Offset");
              } else if (i == 2) {
                id(selected_option).publish_state("Max_Run");
              } else if (i == 3) {
                id(selected_option).publish_state("Fan_Over");
              } else if (i == 4) {
                id(selected_option).publish_state("Info");
              } 
            
            // *****************************************
            //                 edit_setting
            // *****************************************
            } else if(id(run_mode).state == "setting_selected") {
              if (id(dial_dir).state == "bkw") {
                //new_value = std::max(id(target_temp) - 1.0, 32.0);
                new_value = id(setting_value) - 1.0;
              } else if (id(dial_dir).state == "fwd") {
                new_value = id(setting_value) + 1.0;
              }
              id(setting_value) = new_value;
            }
            id(ui_timeout).execute();
            id(prev_rot)=x;
        - component.update: oled_display
        - logger.log: 
            level: INFO
            format: "run_mode: %s, selected_option: %s, setting_value: %.0f, setting_var_name"
            args: [id(run_mode).state.c_str(), id(selected_option).state.c_str(), id(setting_value)]


              

# Rotary encoder button..
binary_sensor:
  - platform: gpio
    pin: 
      number: D4
      mode: INPUT_PULLUP
      inverted: true
    name: "Option"
    id: option_select

    #####  DOUBLE CLICK TO EDIT SELECTED SETTING
    on_double_click:
      then:
        - script.stop: ui_timeout
        - lambda: id(ui_timeout).execute();     
        - lambda: |-
            if(id(run_mode).state == "select_setting"){
              //sitch to setting selected mode...
              id(settings_page).show();
              id(run_mode).publish_state("setting_selected");
              if(id(selected_option).state == "High_Offset") {
                  id(setting_value) = id(High_Offset);
              } else if(id(selected_option).state == "Low_Offset") {
                  id(setting_value) = id(Low_Offset);
              } else if(id(selected_option).state == "Max_Run") {
                  id(setting_value) = id(Max_Run);
              } else if(id(selected_option).state == "Fan_Over") {
                  id(setting_value) = id(Fan_Over);
              } else if(id(selected_option).state == "Info") {
                id(info_page).show();
              }
              
            }
        - component.update: oled_display
    ######  HOLD FOR 3s TO ENTER SETTINGS MENU        
    on_multi_click:
      - timing:
        - ON for at least 3.0s
        then:
          - script.stop: ui_timeout
          - lambda: id(ui_timeout).execute();     
          - lambda: |-
              if(id(run_mode).state.compare("hvac")==0){

                //switch to select_setting mode...
                id(chose_setting_page).show();
                id(run_mode).publish_state("select_setting");
              }
      #####  HOLD FOR 1s TO SAVE SETTING   
      - timing:
        - ON for at least 1.0s
        then:
          - script.stop: ui_timeout
          - lambda: id(ui_timeout).execute();     
          - lambda: |-
                if(id(run_mode).state == "setting_selected"){
                  if(id(selected_option).state == "High_Offset") {
                      id(High_Offset) = id(setting_value);
                  } else if(id(selected_option).state == "Low_Offset") {
                      id(Low_Offset) = id(setting_value);
                  } else if(id(selected_option).state == "Max_Run") {
                      id(Max_Run) = id(setting_value);
                  } else if(id(selected_option).state == "Fan_Over") {
                     id(Fan_Over) = id(setting_value);
                  }
                  
                  id(setting_saved_page).show();
                  id(run_mode).publish_state("setting_save");
                } 

      
script:
  - id: ui_timeout
    then:
      - delay: '5s'
      - lambda: |-
          id(run_mode).publish_state("hvac");
          id(idle_page).show();
      - component.update: oled_display

  - id: set_bang_bang_temps
    then:
      - delay: ${dial_cooldown_timeout}
      - lambda: |-
            auto call = id(thermostat_controller).make_call();
            call.set_target_temperature_low((id(target_temp_low) - 32) * (5.0 / 9.0));
            call.set_target_temperature_high((id(target_temp_high) - 32) * (5.0 / 9.0));
            call.perform();


  - id: fan_shutdown
    then:
      if: 
        condition:
          lambda:  return id(tmode).state.compare("FAN")==0;
        then: 
          # fan mode is on, dont turn off
          - lambda: id(tmode).publish_state("fan");
        else:
          - lambda: id(tmode).publish_state("fan");
          - delay: ${fan_cooldown_timeout}
         
          #- delay: !lambda "return id(Fan_Over);"
          - if:
              condition:
                for: 
                  time: ${fan_cooldown_timeout}
                  condition:
                    and:
                    - switch.is_off: heater
                    - switch.is_off: cooler
              then:
                - switch.turn_off: fan
                - lambda: id(tmode).publish_state("IDLE");

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #reset_pin: D0
    address: 0x3C
    id: oled_display
   
    pages:
      - id: loading_page
        lambda: |-
          it.printf(0,10, id(font_small), " ... ");
          it.printf(0,20, id(font_small), "please wait");

      - id: idle_page
        lambda: |-
          it.printf(1, 10, id(font_medium), "%.0f", id(target_temp_low));

          it.printf(42, 20 , id(font_large), "%.0f", id(my_temp).state * (9.0/5.0) + 32.0);

          it.printf(106, 10, id(font_medium), "%.0f", id(target_temp_high));

          //it.printf(1, 55, id(font_medium), "%.0f", id(my_temp).state * (9.0/5.0) + 32.0);
          
          it.printf(50, 45, id(font_small), "%s",id(tmode).state.c_str());    
      
      - id: set_thermostat
        lambda: |-
          //main page
              
          it.printf(1, 10, id(font_medium), "%.0f", id(target_temp_low));

          it.printf(42, 20 , id(font_large), "%.0f", id(target_temp));

          it.printf(106, 10, id(font_medium), "%.0f", id(target_temp_high));

          //it.printf(1, 55, id(font_medium), "current temp: %.0f", id(my_temp).state * (9.0/5.0) + 32.0);

          it.printf(20, 45, id(font_small), "target temp");
          
          //it.printf(50, 45, id(font_small), "%s",id(tmode).state.c_str());




      - id: chose_setting_page
        lambda: |-
          it.printf(1,5, id(font_small), "Settings");
          it.printf(1, 32, id(font_medium), "%s",id(selected_option).state.c_str());
          it.printf(1,45, id(font_small), "dobule click to edit");

      - id: settings_page
        lambda: |-
          it.printf(0,10, id(font_medium), "set %s", id(selected_option).state.c_str());
          it.printf(50,38, id(font_large), "%.0f", id(setting_value));
          it.printf(20,60, id(font_small), "press to save");
    
      - id: setting_saved_page
        lambda: it.printf(20,60, id(font_small), "saved");

      - id: info_page
        lambda: |-
          it.printf(0,10, id(font_small), "Dan Scott");
          it.printf(0,20, id(font_small), "TBD");
      
      


climate:
  - platform: bang_bang
    id: thermostat_controller
    name: "Thermostat"
    sensor: my_temp
    visual:
      #min_temperature: 40 °F
      #max_temperature: 90 °F
      temperature_step: 1

    default_target_temperature_low: 22 °C
    default_target_temperature_high: 23 °C

    heat_action:
        - switch.turn_on: heater
        - switch.turn_off: cooler

    cool_action:
        - switch.turn_on: cooler
        - switch.turn_off: heater

    idle_action:
      - switch.turn_off: heater
      - switch.turn_off: cooler
     
          



